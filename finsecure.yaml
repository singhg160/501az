AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create two VPCs, a peering connection, an RDS instance, a web server, and an Application Load Balancer (ALB).

Parameters:
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Default: vockey

Resources:
  # VPC1 for RDS
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC1

  # VPC2 for Web Server
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC2

  # Subnet for RDS (Private, AZ1)
  PrivateSubnetVPC1AZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: Private-Subnet-VPC1-AZ1

  # Additional Subnet for RDS (Private, AZ2)
  PrivateSubnetVPC1AZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: Private-Subnet-VPC1-AZ2

  # Subnet for Web Server (Public)
  PublicSubnetVPC2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-VPC2

  # Internet Gateway for VPC2
  InternetGatewayVPC2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-VPC2

  AttachGatewayVPC2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGatewayVPC2

  # Route Table for VPC2 (for public subnet)
  PublicRouteTableVPC2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: Public-RouteTable-VPC2

  PublicRouteVPC2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableVPC2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayVPC2

  RouteTableAssociationVPC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetVPC2
      RouteTableId: !Ref PublicRouteTableVPC2

  # VPC Peering Connection between VPC1 and VPC2
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC1
      PeerVpcId: !Ref VPC2

  AcceptVPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL traffic from Web Server
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  # Security Group for Web Server
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH traffic
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # RDS Subnet Group (Two Subnets in Two AZs)
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: MyRDSSubnetGroup
      DBSubnetGroupDescription: Private Subnets for RDS
      SubnetIds:
        - !Ref PrivateSubnetVPC1AZ1
        - !Ref PrivateSubnetVPC1AZ2

  # RDS MySQL Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: MyRDSInstance
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: password123
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false

  # EC2 Web Server Instance (Single instance behind ALB)
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0888db1202897905c
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnetVPC2
      IamInstanceProfile: !Ref InstanceRole
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd mysql
          systemctl start httpd
          systemctl enable httpd
          echo "<?php phpinfo(); ?>" > /var/www/html/index.php
          echo "<?php
          \$conn = new mysqli('DB_ENDPOINT', 'admin', 'password123', 'MyDatabase');
          if (\$conn->connect_error) {
              die('Connection failed: ' . \$conn->connect_error);
          }
          echo 'Connected successfully to RDS!';
          ?>" > /var/www/html/db_test.php

  # ALB for Web Server
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebServer-ALB
      Subnets:
        - !Ref PublicSubnetVPC2
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Scheme: internet-facing

  # Target Group for ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebServerTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC2
      TargetType: instance
      Targets:
        - Id: !Ref WebServerInstance

  # ALB Listener to route traffic to EC2
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Port: 80
      Protocol: HTTP

Outputs:
  WebServerPublicIP:
    Description: Public IP of the Web Server instance
    Value: !GetAtt WebServerInstance.PublicIp

  LoadBalancerDNS:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt LoadBalancer.DNSName

  RDSInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
